There were a lot of redundancies among all the asynchronous algorithms, specially at the moment of launching particles. I created a new function called "runAsyncGeneration". This function is shared among all asynchronous algorithms. It will execute an asynchronous genaration, which means that it handles the asynchronous launch of particles (processes) and it will make sure that at least a minimum number of particles will have finished their job before advancing to the breeding. 
Without this solution, there was a very frequent problem in the asynchronous runs: the program would crash because the asynchronous algorithms were advancing to breeding with only one particle. I took some time to develop the runAsuncGeneration function but now the the async algorithms are much more clean and easy to edit.
*Note: right now the minimum accepted number of finished particles for advancing to breeding and is 50% (if we have 16 particles, we wait at least for 8, for example). This limit parameter is hard coded right now, but when I'm done with the asynchronous algorithms, I will implement this paramater as an option that can be specified by the user. We can also implement an additional limit option for the runtime of a particle. For example, if the user knows that one particle should not take more then 4 days to run, the algorithm would advance to breeding using the particles that are done, and reruning the particles that got stuck (that are running for more then 4 days). 
In the previous version, the swarm state and output summary were saved after checking the stop criteria. Now both are saved before checking the stop criteria, to make sure that we have a backup of the previous generation before doing the breeding step.

